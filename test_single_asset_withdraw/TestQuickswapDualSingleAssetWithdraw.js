const {
    expectEvent, BN, constants
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IStakingRewards = artifacts.require('IStakingRewards')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')
const IERC20 = artifacts.require('IERC20')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmQuickswapDual')
const AssetRouter = artifacts.require('UnoAssetRouterQuickswapDual')

const pool = '0x14977e7E263FF79c4c3159F497D9551fbE769625' // WMATIC-USDC
const DAIHolder = '0x06959153B974D0D5fDfd87D561db6d8d4FA0bb0B'// has to be unlocked and hold 0xf28164A485B0B2C90639E47b0f377b4a438a16B1

contract('UnoAssetRouterQuickswapDualSingleAssetWithdraw', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter
    let DAIToken

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin

        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })

        const stakingRewards = await IStakingRewards.at(pool)
        const lpToken = await IUniswapV2Pair.at(await stakingRewards.stakingToken())

        const tokenAAddress = await lpToken.token0()
        const tokenBAddress = await lpToken.token1()

        tokenA = await IERC20.at(tokenAAddress)
        tokenB = await IERC20.at(tokenBAddress)

        DAIToken = await IUniswapV2Pair.at('0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000c12d0f18791ba4dff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd6e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000000000000000000000000000000000000ee4a0f28f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf148271111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000c12d0f18791ba4dff2791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000eda62fc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000eda62fc8f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000000000000000000000000000000000cfee7c08`
                await assetRouter.depositSingleAsset(pool, DAIToken.address, DAIAmount, [tokenAData, tokenBData], 0, 0, DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder);
                ({
                    stakeLP: stakeLPBefore,
                    stakeA,
                    stakeB
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001824a6683b7196514800000000000000000000000000000000000000000000000e9024c1b407981eca0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026200000000000000000000000000000000000000000000000000024400021600a0c9e75c48000000000000000009010000000000000000000000000000000000000000000000000001e800007b0c200d500b1d8e8ef31e21c99d1db9a6444d3adf1270eef611894ceae652979c9d0dae1deb597790c6ee6ae4071198002dc6c0eef611894ceae652979c9d0dae1deb597790c6ee0000000000000000000000000000000000000000000000017660c1bbdbbc6f310d500b1d8e8ef31e21c99d1db9a6444d3adf127000a007e5c0d20000000000000000000000000000000000000000000001490000f600008f0c200d500b1d8e8ef31e21c99d1db9a6444d3adf1270adbf1854e5883eb8aa7baf50705338739e558e5b6ae40711b8002dc6c0adbf1854e5883eb8aa7baf50705338739e558e5b853ee4b2a13f8a742d64c8f088be7ba2131f670d0000000000000000000000000000000000000000000000000208665637be72500d500b1d8e8ef31e21c99d1db9a6444d3adf127000206ae4071138002dc6c0853ee4b2a13f8a742d64c8f088be7ba2131f670df04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000000000000000000000000000000000000e735bc97ceb23fd6bc0add59e62ac25578270cff1b9f61900206ae4071198002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd00000000000000000000000000000000000000000000000d19c3fff82bdbaf992791bca1f2de4661ed88a30c99a7a9449aa8417480a06c4eca278f3cf7ad23cd3cadbd9735aff958023239c6a0631111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}000000000000000000000000000000000000000000000000000000001db46f4700000000000000000000000000000000000000000000000d76fac46b6951fba50000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae40711b8002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000d76fac46b6951fba52791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000cfee7c08`
                // const tokenAData = `0x12aa3caf0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000f5c3455d30458e9a1128f85941f533834f01d8b6000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000022273a3b40943f2be5000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e40000000000000000000000000000000000000000000000000000c600009800a007e5c0d200000000000000000000000000000000000000000000000000007400003a4020f5c3455d30458e9a1128f85941f533834f01d8b6bd6015b4000000000000000000000000a71415675f68f29259ddd63215e5518d2735bf0a4020a71415675f68f29259ddd63215e5518d2735bf0add93f59a0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf80a06c4eca270d500b1d8e8ef31e21c99d1db9a6444d3adf12701111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000cfee7c08`
                // const tokenBData = `0x12aa3caf0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000001d7f99850000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013a00000000000000000000000000000000000000000000000000000000011c4332742aeea3cdc97efc045aab1d432a8fab5a0bcdc1000000000000000000000000000000000000000000000000000000001d7f9985002424b31a0c0000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000cfee7c08`

                const receipt = await assetRouter.withdrawSingleAsset(pool, stakeLPBefore, DAIToken.address, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000c12d0f18791ba4dff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd6e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000000000000000000000000000000000000ee4a0f28f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf148271111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000c12d0f18791ba4dff2791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000eda62fc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000eda62fc8f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000000000000000000000000000000000cfee7c08`
                await assetRouter.depositSingleAsset(pool, DAIToken.address, DAIAmount, [tokenAData, tokenBData], 0, 0, DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder));
                ({
                    stakeLP: stakeLPBefore
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x'
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000006e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}0000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000918693d06f6a1f6310000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf148271111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000918693d06f6a1f6312791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000cfee7c08`
                const receipt = await assetRouter.withdrawSingleETH(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
