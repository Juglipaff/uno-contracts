const {
    expectEvent, BN, constants
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmPancakeswap')
const AssetRouter = artifacts.require('UnoAssetRouterPancakeswap')

const pool = '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16' // wbnb busd

const DAIHolder = '0x8894E0a0c962CB723c1976a4421c95949bE2D4E3'// has to be unlocked and hold 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3

approxeq = (bn1, bn2, epsilon, message) => {
    const amountDelta = bn1.sub(bn2).add(epsilon)
    assert.ok(!amountDelta.isNeg(), message)
}

contract('UnoAssetRouterPancakeswapSingleAssetWithdraw', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin
        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })
        DAIToken = await IUniswapV2Pair.at('0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000003ab77e40340ab084c3e23be8e5a6f7afed9d41dc000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000a775ae10cc76cfb000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1b96b92314c44b159149f7e0303511fb2fc4774f00000000000000000000000000000000000000000000000d7c3296567b8fe3081af3f329e8be154074d8769d1ffa4ee058b1dbc300206ae4071138001e84801b96b92314c44b159149f7e0303511fb2fc4774f1111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000a775ae10cc76cfbe9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000003ab77e40340ab084c3e23be8e5a6f7afed9d41dc000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000d7c3296567b8fe3080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000d7c3296567b8fe3081af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000000000000000000000000000000000cfee7c08`
                await assetRouter.depositSingleAsset(pool, DAIToken.address, DAIAmount, [tokenAData, tokenBData], 0, 0, DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder);
                ({
                    stakeLP: stakeLPBefore,
                    stakeA,
                    stakeB
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000008e6d1e545942d4b62000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae40711b8001e84801b96b92314c44b159149f7e0303511fb2fc4774f3ab77e40340ab084c3e23be8e5a6f7afed9d41dc000000000000000000000000000000000000000000000008e7e169fb358bf059bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00206ae4071138001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000008e6d1e545942d4b62e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000003ab77e40340ab084c3e23be8e5a6f7afed9d41dc000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001043561a882930000000000000000000000000000000000000000000000000000820cdb6c38d52d7dc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae4071138001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000820cdb6c38d52d7dce9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000000000000000000000000000000000cfee7c08`

                const receipt = await assetRouter.withdrawSingleAsset(pool, stakeLPBefore, DAIToken.address, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000003ab77e40340ab084c3e23be8e5a6f7afed9d41dc000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000a775ae10cc76cfb000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1b96b92314c44b159149f7e0303511fb2fc4774f00000000000000000000000000000000000000000000000d7c3296567b8fe3081af3f329e8be154074d8769d1ffa4ee058b1dbc300206ae4071138001e84801b96b92314c44b159149f7e0303511fb2fc4774f1111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000a775ae10cc76cfbe9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000003ab77e40340ab084c3e23be8e5a6f7afed9d41dc000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000d7c3296567b8fe3080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000d7c3296567b8fe3081af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000000000000000000000000000000000cfee7c08`
                await assetRouter.depositSingleAsset(pool, DAIToken.address, DAIAmount, [tokenAData, tokenBData], 0, 0, DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder));
                ({
                    stakeLP: stakeLPBefore
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x'
                const tokenBData = `0x12aa3caf0000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000056253fc5659600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008500000000000000000000000000000000000000000000000000000000006700206ae4071138001e84801b96b92314c44b159149f7e0303511fb2fc4774f1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000056253fc565960e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000000000000000000000000000000000cfee7c08`
                const receipt = await assetRouter.withdrawSingleETH(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
