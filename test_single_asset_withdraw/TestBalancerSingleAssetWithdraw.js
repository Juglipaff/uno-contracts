const {
    expectEvent, BN, constants
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')
const IERC20 = artifacts.require('IERC20')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmBalancer')
const AssetRouter = artifacts.require('UnoAssetRouterBalancer')

const pool = '0xaF5E0B5425dE1F5a630A8cB5AA9D97B8141C908D' // WMATIC-stMATIC
const DAIHolder = '0x06959153B974D0D5fDfd87D561db6d8d4FA0bb0B'// has to be unlocked and hold 0xf28164A485B0B2C90639E47b0f377b4a438a16B1

// 0xc45092e7e73951c6668f6C46AcFCa9F2B1c69aEf
// 0xc45092e7e73951c6668f6C46AcFCa9F2B1c69aEf
contract('UnoAssetRouterBalancerSingleAssetWithdraw', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter
    let DAIToken

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin

        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })

        DAIToken = await IUniswapV2Pair.at('0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000c12d0f18791ba4dff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd6e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000000000000000000000000000000000000ee4a0f28f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf148271111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000c12d0f18791ba4dff2791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000a52207f7899b4f14d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017700000000000000000000000000000000000000000000000000000000015900a007e5c0d20000000000000000000000000000000000000000000001350000ce00006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd6e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000000000000000000000000000000000000ee214478f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf1482765752c54d9102bdfd69d351e1838a1be83c924c600000000000000000000000000000000000000000000000af905afa7b55c46a52791bca1f2de4661ed88a30c99a7a9449aa8417400206ae40711b8002dc6c065752c54d9102bdfd69d351e1838a1be83c924c61111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000a52207f7899b4f14d0d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000cfee7c08`
                await assetRouter.depositSingleAsset(pool, DAIToken.address, DAIAmount, [tokenAData, tokenBData], 0, DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder)
                stakeLPBefore = await assetRouter.userStake(DAIHolder, pool)
            })
            it('fires events', async () => {
                const tokenAData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000002b68bd68f551ce4fdbc81d0ed841b7d0b1fdc621000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000000ad78ebc5ac6200000000000000000000000000000000000000000000000000006b9726791e5eda209000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cb0000000000000000000000000000000000000000000000000000000000ad00a007e5c0d200000000000000000000000000000000000000000000000000008900004f00a0c028b46d062b68bd68f551ce4fdbc81d0ed841b7d0b1fdc621000000000000000000000000000000000000000000000000000000000764c41c0975454aff666519a07eef401d5e97769cb2e82f40200975454aff666519a07eef401d5e97769cb2e82fbd6015b40000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c40000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}000000000000000000000000000000000000000000000015af1d78b58c40000000000000000000000000000000000000000000000000000e3f62ceac2a3bf917000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c60000000000000000000000000000000000000000000000000001a800017a00a007e5c0d200000000000000000000000000000000000000000000000000015600011c4330a40cac1b04d7491bdfb42ccac97dff25e0efb09e000000000000000000000000000000000000000000000000000000000faa762d002424b31a0c000000000000000000000000f5c3455d30458e9a1128f85941f533834f01d8b600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c44020f5c3455d30458e9a1128f85941f533834f01d8b6dd93f59a000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb80a06c4eca278f3cf7ad23cd3cadbd9735aff958023239c6a0631111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000cfee7c08`

                // Proportional Exit
                const userData = web3.eth.abi.encodeParameters(['uint256', 'uint256'], ['1', stakeLPBefore.toString()])
                const receipt = await assetRouter.withdrawSingleAsset(pool, DAIToken.address, userData, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const stakeLP = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000c12d0f18791ba4dff000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000f200a007e5c0d20000000000000000000000000000000000000000000000000000ce00006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd6e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000000000000000000000000000000000000ee4a0f28f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf148271111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000c12d0f18791ba4dff2791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000cfee7c08`
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4000000000000000000000000f04adbf75cdfc5ed26eea4bbbb991db002036bdd000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000a52207f7899b4f14d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017700000000000000000000000000000000000000000000000000000000015900a007e5c0d20000000000000000000000000000000000000000000001350000ce00006700206ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd6e7a5fafcec6bb1e78bae2a1f0b612012bf14827000000000000000000000000000000000000000000000000000000000ee214478f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae4071138002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf1482765752c54d9102bdfd69d351e1838a1be83c924c600000000000000000000000000000000000000000000000af905afa7b55c46a52791bca1f2de4661ed88a30c99a7a9449aa8417400206ae40711b8002dc6c065752c54d9102bdfd69d351e1838a1be83c924c61111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000a52207f7899b4f14d0d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000cfee7c08`
                await assetRouter.depositSingleAsset(pool, DAIToken.address, DAIAmount, [tokenAData, tokenBData], 0, DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder))
                stakeLPBefore = await assetRouter.userStake(DAIHolder, pool)
            })
            it('fires events', async () => {
                const tokenAData = '0x'
                const tokenBData = `0x12aa3caf000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb0000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c40000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001043561a882930000000000000000000000000000000000000000000000000000899446fa823d87b040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013a00000000000000000000000000000000000000000000000000000000011c4330cacba79427a10008804add4f642275ae76419d6a00000000000000000000000000000000000000000000000899446fa823d87b04002424b31a0c0000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4000000000000cfee7c08`
                // Proportional Exit
                const userData = web3.eth.abi.encodeParameters(['uint256', 'uint256'], ['1', stakeLPBefore.toString()])
                const receipt = await assetRouter.withdrawSingleETH(pool, userData, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const stakeLP = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
