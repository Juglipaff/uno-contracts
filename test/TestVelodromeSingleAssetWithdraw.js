const {
    expectEvent, BN
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmVelodrome')
const AssetRouter = artifacts.require('UnoAssetRouterVelodrome')

const pool = '0xa1034Ed2C9eb616d6F7f318614316e64682e7923' // wAVAX-USDC

const DAIHolder = '0x7B7B957c284C2C227C980d6E2F804311947b84d0'// has to be unlocked and hold 0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1

approxeq = (bn1, bn2, epsilon, message) => {
    const amountDelta = bn1.sub(bn2).add(epsilon)
    assert.ok(!amountDelta.isNeg(), message)
}

contract('UnoAssetRouterVelodromeSingleAssetWithdraw', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin
        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })
        DAIToken = await IUniswapV2Pair.at('0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('100000000000000000000') // 100$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000001794384000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d60000000000000000000000000000000000000000000001b800006800004e80206c4eca27da10009cbd5d07dd0cecc66161fc93d7c9000da146a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000006f05b59d3b200000020d6bdbf78da10009cbd5d07dd0cecc66161fc93d7c9000da15126a132dab612db5cb9fc9ac426a0cc215a3423f9c9da10009cbd5d07dd0cecc66161fc93d7c9000da10004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000179438400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b29e730000000000000000000000000000000000000000000000000000000000000001000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000100000000000000000000b4eb6cb3`// await fetchData(tokenASwapParams)
                const tokenBData = `0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce7384000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000158f6ed2e501a0136000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c80000000000000000000000000000000000000000000004aa00006800004e80206c4eca27da10009cbd5d07dd0cecc66161fc93d7c9000da146a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000006f05b59d3b200000020d6bdbf78da10009cbd5d07dd0cecc66161fc93d7c9000da100a007e5c0d200000000000000000000000000000000000000000000000000041e0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c9da10009cbd5d07dd0cecc66161fc93d7c9000da10004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000179438400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b29e730000000000000000000000000000000000000000000000000000000000000001000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000100a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000002a00001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e671eaac5a467c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b29e7300000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce738400000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000152107b43a3bfbaba00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b29e7300000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce73840000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000b4eb6cb3`// await fetchData(tokenBSwapParams)
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder);
                ({
                    stakeLP: stakeLPBefore,
                    stakeA,
                    stakeB
                } = await assetRouter.userStake(DAIHolder, pool))
                console.log(stakeLPBefore.toString(), stakeA.toString(), stakeB.toString())
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000007b7b957c284c2c227c980d6e2f804311947b84d0000000000000000000000000000000000000000000000000000000000234d66a000000000000000000000000000000000000000000000000fe4c4ea82a63a4f2000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d60000000000000000000000000000000000000000000001b800006800004e80206c4eca277f5c764cbc14f9669b88837ca1490cca17c3160746a3a41bd932244dd08186e4c19f1a7e48cbcdf4000000000000000000000000000000000000000000000000000000000005a5fb0020d6bdbf787f5c764cbc14f9669b88837ca1490cca17c316075126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe4c4ea82a63a4f200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000000000000000000000000000000000000000000100000000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce7384000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000007b7b957c284c2c227c980d6e2f804311947b84d0000000000000000000000000000000000000000000000002a83628ce52d536a80000000000000000000000000000000000000000000000014def31097c91d0c0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c80000000000000000000000000000000000000000000004aa00006800004e80206c4eca278ae125e8653821e851f12a49f7765db9a9ce738446a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000006cd5772b407408b0020d6bdbf788ae125e8653821e851f12a49f7765db9a9ce738400a007e5c0d200000000000000000000000000000000000000000000000000041e0002ce00a0c9e75c4800000000000000002c060000000000000000000000000000000000000000000000000002a00001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c98ae125e8653821e851f12a49f7765db9a9ce73840004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c16d100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce73840000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c98ae125e8653821e851f12a49f7765db9a9ce73840004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000143105600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce73840000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000015126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014def31097c91d0c000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000b4eb6cb3'

                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('100000000000000000000') // 100$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000001794384000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d60000000000000000000000000000000000000000000001b800006800004e80206c4eca27da10009cbd5d07dd0cecc66161fc93d7c9000da146a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000006f05b59d3b200000020d6bdbf78da10009cbd5d07dd0cecc66161fc93d7c9000da15126a132dab612db5cb9fc9ac426a0cc215a3423f9c9da10009cbd5d07dd0cecc66161fc93d7c9000da10004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000179438400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b29e730000000000000000000000000000000000000000000000000000000000000001000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000100000000000000000000b4eb6cb3`// await fetchData(tokenASwapParams)
                const tokenBData = `0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce7384000000000000000000000000afea5601b0a894451955355e79ad3026515e500d000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000158f6ed2e501a0136000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c80000000000000000000000000000000000000000000004aa00006800004e80206c4eca27da10009cbd5d07dd0cecc66161fc93d7c9000da146a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000006f05b59d3b200000020d6bdbf78da10009cbd5d07dd0cecc66161fc93d7c9000da100a007e5c0d200000000000000000000000000000000000000000000000000041e0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c9da10009cbd5d07dd0cecc66161fc93d7c9000da10004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000179438400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b29e730000000000000000000000000000000000000000000000000000000000000001000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000100a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000002a00001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e671eaac5a467c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b29e7300000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce738400000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000152107b43a3bfbaba00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000064b29e7300000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce73840000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000b4eb6cb3`// await fetchData(tokenBSwapParams)
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder));
                ({
                    stakeLP: stakeLPBefore
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000007b7b957c284c2c227c980d6e2f804311947b84d0000000000000000000000000000000000000000000000000000000000234d66a0000000000000000000000000000000000000000000000000022d1f4c1fd839000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dd8000000000000000000000000000000000000000dba000da400006800004e80206c4eca277f5c764cbc14f9669b88837ca1490cca17c3160746a3a41bd932244dd08186e4c19f1a7e48cbcdf4000000000000000000000000000000000000000000000000000000000005a5fb0020d6bdbf787f5c764cbc14f9669b88837ca1490cca17c3160700a0c9e75c4800000000000000060202000000000000000000000000000000000000000000000d0e00089000038e00a0c9e75c4800000000000000002d050000000000000000000000000000000000000000000000000003600001b000a007e5c0d200000000000000000000000000000000000000000000000000018c0001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b252e092564700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000014101420000000000000000000000000000000000000600042e1a7d4d000000000000000000000000000000000000000000000000000000000000000000a007e5c0d200000000000000000000000000000000000000000000000000018c0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644226ea3d4f200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004101420000000000000000000000000000000000000600042e1a7d4d000000000000000000000000000000000000000000000000000000000000000000a007e5c0d20000000000000000000000000000000000000000000000000004de0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000628ff8ca3ed4400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000001f32b1c2345538c0c6f582fcb022739c4a194ebb000000000000000000000000000000000000000000000000000000000000000000a0c9e75c480000000000000000260c0000000000000000000000000000000000000000000000000003600001b000a007e5c0d200000000000000000000000000000000000000000000000000018c0001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c91f32b1c2345538c0c6f582fcb022739c4a194ebb0004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ac042132d21f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001f32b1c2345538c0c6f582fcb022739c4a194ebb000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000014101420000000000000000000000000000000000000600042e1a7d4d000000000000000000000000000000000000000000000000000000000000000000a007e5c0d200000000000000000000000000000000000000000000000000018c0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c91f32b1c2345538c0c6f582fcb022739c4a194ebb0004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054b6284d2154f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001f32b1c2345538c0c6f582fcb022739c4a194ebb000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004101420000000000000000000000000000000000000600042e1a7d4d000000000000000000000000000000000000000000000000000000000000000000a007e5c0d200000000000000000000000000000000000000000000045a00041e0002ce00a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000002a00001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f09512f8fc2df00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000015126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d5f85e64985894f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e418ccc270e800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004200000000000000000000000000000000000042000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004101420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a9605820000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce7384000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000007b7b957c284c2c227c980d6e2f804311947b84d0000000000000000000000000000000000000000000000002a83628ce52d536a8000000000000000000000000000000000000000000000000002db654cdd11226000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e80000000000000000000000000000000000000007ca0007b400006800004e80206c4eca278ae125e8653821e851f12a49f7765db9a9ce738446a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000006cd5772b407408b0020d6bdbf788ae125e8653821e851f12a49f7765db9a9ce738400a007e5c0d20000000000000000000000000000000000000007280006ec00059c0002ce00a0c9e75c4800000000000000002c060000000000000000000000000000000000000000000000000002a00001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c98ae125e8653821e851f12a49f7765db9a9ce73840004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c16d100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce73840000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c98ae125e8653821e851f12a49f7765db9a9ce73840004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000143105600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000008ae125e8653821e851f12a49f7765db9a9ce73840000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000100a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000002a00001505106a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059953087fde3ef300000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000015126a132dab612db5cb9fc9ac426a0cc215a3423f9c97f5c764cbc14f9669b88837ca1490cca17c316070004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001125c26d2701edb0100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002db654cdd1122600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064b2adac00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004200000000000000000000000000000000000042000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004101420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000b4eb6cb3'
                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
