const {
    expectEvent, BN
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmTraderjoe')
const AssetRouter = artifacts.require('UnoAssetRouterTraderjoe')

const pool = '0xf4003F4efBE8691B60249E6afbD307aBE7758adb' // wAVAX-USDC

const DAIHolder = '0x05541A4891F0241Cc4ba7E0664428e5Af86Ae3Fe'// has to be unlocked and hold 0xd586E7F844cEa2F87f50152665BCbc2C279D8d70

approxeq = (bn1, bn2, epsilon, message) => {
    const amountDelta = bn1.sub(bn2).add(epsilon)
    assert.ok(!amountDelta.isNeg(), message)
}

contract('UnoAssetRouterTraderjoeSingleAssetDeposit', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin
        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })
        DAIToken = await IUniswapV2Pair.at('0xd586E7F844cEa2F87f50152665BCbc2C279D8d70')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d70000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c700000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000113a2b3f3643b2c85000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e20000000000000000000000000000000000000000000001c400006800004e80206c4eca27d586e7f844cea2f87f50152665bcbc2c279d8d7046a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78d586e7f844cea2f87f50152665bcbc2c279d8d7000a007e5c0d20000000000000000000000000000000000000000000001380000de00008f0c20d586e7f844cea2f87f50152665bcbc2c279d8d70459eb852799057912138519eab28c8e0c227c42c6ae4071138002dc6c0459eb852799057912138519eab28c8e0c227c42cd87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df97c7bd586e7f844cea2f87f50152665bcbc2c279d8d7000a0c028b46d06d87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df87986b5352a39c11a81fe6748993d586ec448a01f08b54020b5352a39c11a81fe6748993d586ec448a01f08b553c059a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000b4eb6cb3`// await fetchData(tokenASwapParams)
                const tokenBData = `0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d70000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000df879860000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018800000000000000000000000000000000000000000000016a00006800004e80206c4eca27d586e7f844cea2f87f50152665bcbc2c279d8d7046a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78d586e7f844cea2f87f50152665bcbc2c279d8d7000a007e5c0d20000000000000000000000000000000000000000000000000000de00008f0c20d586e7f844cea2f87f50152665bcbc2c279d8d70459eb852799057912138519eab28c8e0c227c42c6ae4071138002dc6c0459eb852799057912138519eab28c8e0c227c42cd87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df97c7bd586e7f844cea2f87f50152665bcbc2c279d8d7000a0c028b46d06d87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df879861111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000b4eb6cb3`// await fetchData(tokenBSwapParams)
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder);
                ({
                    stakeLP: stakeLPBefore,
                    stakeA,
                    stakeB
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c7000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d7000000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d699571a57d3efe7c50369fb5350448fa1ad246e000000000000000000000000000000000000000000000000a688906bd8b00000000000000000000000000000000000000000000000000003c7224511904d18f20000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017200000000000000000000000000000000000000000000015400006800004e80206c4eca27b31f66aa3c1e785363f0875a1b74e27b85fd66c746a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000001aa535d3d0c00000020d6bdbf78b31f66aa3c1e785363f0875a1b74e27b85fd66c700a007e5c0d20000000000000000000000000000000000000000000000000000c800006e4822b5352a39c11a81fe6748993d586ec448a01f08b5b31f66aa3c1e785363f0875a1b74e27b85fd66c753c059a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000855ee438445075f25c18a125ba6607543052a1944020855ee438445075f25c18a125ba6607543052a19453c059a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d7000000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d699571a57d3efe7c50369fb5350448fa1ad246e000000000000000000000000000000000000000000000000000000000bebc2000000000000000000000000000000000000000000000000055e14f5b6583812bc000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f40000000000000000000000000000000000000000000000d600006800004e80206c4eca27b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e46a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000000000000001e84800020d6bdbf78b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e4820855ee438445075f25c18a125ba6607543052a194b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e53c059a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000b4eb6cb3'

                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d70000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c700000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000113a2b3f3643b2c85000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e20000000000000000000000000000000000000000000001c400006800004e80206c4eca27d586e7f844cea2f87f50152665bcbc2c279d8d7046a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78d586e7f844cea2f87f50152665bcbc2c279d8d7000a007e5c0d20000000000000000000000000000000000000000000001380000de00008f0c20d586e7f844cea2f87f50152665bcbc2c279d8d70459eb852799057912138519eab28c8e0c227c42c6ae4071138002dc6c0459eb852799057912138519eab28c8e0c227c42cd87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df97c7bd586e7f844cea2f87f50152665bcbc2c279d8d7000a0c028b46d06d87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df87986b5352a39c11a81fe6748993d586ec448a01f08b54020b5352a39c11a81fe6748993d586ec448a01f08b553c059a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000b4eb6cb3`// await fetchData(tokenASwapParams)
                const tokenBData = `0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d70000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000df879860000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018800000000000000000000000000000000000000000000016a00006800004e80206c4eca27d586e7f844cea2f87f50152665bcbc2c279d8d7046a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78d586e7f844cea2f87f50152665bcbc2c279d8d7000a007e5c0d20000000000000000000000000000000000000000000000000000de00008f0c20d586e7f844cea2f87f50152665bcbc2c279d8d70459eb852799057912138519eab28c8e0c227c42c6ae4071138002dc6c0459eb852799057912138519eab28c8e0c227c42cd87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df97c7bd586e7f844cea2f87f50152665bcbc2c279d8d7000a0c028b46d06d87cd5aa7efdc4de73ef8c7166d4d1daa37e2330000000000000000000000000000000000000000000000000000000000df879861111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000b4eb6cb3`// await fetchData(tokenBSwapParams)
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder));
                ({
                    stakeLP: stakeLPBefore
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d699571a57d3efe7c50369fb5350448fa1ad246e000000000000000000000000000000000000000000000000a688906bd8b00000000000000000000000000000000000000000000000000000526f1e874dd20000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e80000000000000000000000000000000000000000ca0000a400006800004e80206c4eca27b31f66aa3c1e785363f0875a1b74e27b85fd66c746a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000001aa535d3d0c00000020d6bdbf78b31f66aa3c1e785363f0875a1b74e27b85fd66c74121b31f66aa3c1e785363f0875a1b74e27b85fd66c700042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000e0211111111254eeb25477b68fb85ed929f73a9605820000000000000000a4de3d0e9ba40000000000000000000000000000000000000000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000032d12a25f539e341089050e2d26794f041fc9df8000000000000000000000000d699571a57d3efe7c50369fb5350448fa1ad246e000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000746c0edc62c2118e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001460000000000000000000000000000000001280001120000d600006800004e80206c4eca27b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e46a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000000000000001e84800020d6bdbf78b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e4820b5352a39c11a81fe6748993d586ec448a01f08b5b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e53c059a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032d12a25f539e341089050e2d26794f041fc9df84101b31f66aa3c1e785363f0875a1b74e27b85fd66c700042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000b4eb6cb3'
                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
