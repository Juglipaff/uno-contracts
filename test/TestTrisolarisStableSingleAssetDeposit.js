const {
    expectRevert, expectEvent, BN, constants
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniversalMasterChef = artifacts.require('IUniversalMasterChef')
const IERC20 = artifacts.require('IERC20')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmTrisolarisStable')
const AssetRouter = artifacts.require('UnoAssetRouterTrisolarisStable')

const pool = '0x458459E48dbAC0C8Ca83F8D0b7b29FEfE60c3970' // USDC-USDT-USN
const lpTokenAddress = '0x87BCC091d0A7F9352728100268Ac8D25729113bB'

const masterChefV2 = '0x3838956710bcc9D122Dd23863a0549ca8D5675D6'
const DAIHolder = '0x456325F2AC7067234dD71E01bebe032B0255e039'// has to be unlocked and hold 0xe3520349F477A5F6EB06107066048508498A291b
approxeq = (bn1, bn2, epsilon, message) => {
    const amountDelta = bn1.sub(bn2).add(epsilon)
    assert.ok(!amountDelta.isNeg(), message)
}

contract('UnoAssetRouterTrisolarisStableSingleAssetDeposit', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter; let
        factory

    let tokens
    const tokenContracts = []
    let MasterChef
    let pid

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })
        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        factory = await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })

        tokens = await assetRouter.getTokens(pool)
        for (let i = 0; i < tokens.length; i++) {
            tokenContracts.push(await IERC20.at(tokens[i]))
        }

        MasterChef = await IUniversalMasterChef.at(masterChefV2)
        const poolLength = (await MasterChef.poolLength()).toNumber()
        for (let i = 0; i < poolLength; i++) {
            const _lpToken = await MasterChef.lpToken(i)
            if (_lpToken.toString().toLowerCase() === lpTokenAddress.toLowerCase()) {
                pid = i
                break
            }
        }
    })

    describe('Single Asset Deposit', () => {
        describe('deposit token', () => {
            let stakeLPBefore
            let totalDepositsLPBefore
            let DAIToken
            let DAIAmount
            let tokenBalanceBefore
            const tokensData = []

            before(async () => {
                const fromToken = '0xe3520349F477A5F6EB06107066048508498A291b'

                DAIToken = await IERC20.at(fromToken)
                const DAIHolderBalance = await DAIToken.balanceOf(DAIHolder)
                tokenBalanceBefore = DAIHolderBalance

                DAIAmount = new BN('1500000000000000000000') // 1000$

                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder }) // change

                tokensData[0] = `0x12aa3caf0000000000000000000000007731f8df999a9441ae10519617c24568dc82f697000000000000000000000000e3520349f477a5f6eb06107066048508498a291b000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc408020000000000000000000000007731f8df999a9441ae10519617c24568dc82f697000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000c62e920000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006350000000000000000000000000000000000000006170005e900006800004e80206c4eca27e3520349f477a5f6eb06107066048508498a291b46a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78e3520349f477a5f6eb06107066048508498a291b00a0c9e75c48000000000000050202010000000000000000000000000000000000000005530003e600021000018100a007e5c0d200000000000000000000000000000000000000000000015d0000f600008f0c20e3520349f477a5f6eb06107066048508498a291b2c4d78a40bab1a6cbb4b59297cd7b2eba21128ef6ae4071138002dc6c02c4d78a40bab1a6cbb4b59297cd7b2eba21128ef2639f48ace89298fa2e874ef2e26d4576058ae6d0000000000000000000000000000000000000000000000000000000001560121e3520349f477a5f6eb06107066048508498a291b00206ae40711b8002dc6c02639f48ace89298fa2e874ef2e26d4576058ae6d2f41af687164062f118297ca10751f4b55478ae10000000000000000000000000000000000000000000000000029e7aa4b1875a64988a896b1227218e4a686fde5eabdcabd91571f00206ae4071138002dc6c02f41af687164062f118297ca10751f4b55478ae11111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000137c6d0c9bdeed33cd01541e1eed10f90519d2c06fe3feb0c20e3520349f477a5f6eb06107066048508498a291bbb310ef4fac855f2f49d8fb35a2da8f639b3464e6ae4071138002dc6c0bb310ef4fac855f2f49d8fb35a2da8f639b3464e1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000028e02cee3520349f477a5f6eb06107066048508498a291b00a007e5c0d20000000000000000000000000000000000000000000001b20000e200008f0c20e3520349f477a5f6eb06107066048508498a291b28058325c9d1779b74f5b6ae9ecd83e30bc961b16ae4071138002dc6c028058325c9d1779b74f5b6ae9ecd83e30bc961b103b666f3488a7992b2385b12df7f35156d7b29cd0000000000000000000000000000000000000000001d167f77bdd0d5188702e3e3520349f477a5f6eb06107066048508498a291b00206ae4071118002dc6c003b666f3488a7992b2385b12df7f35156d7b29cd00000000000000000000000000000000000000000000000000000000028316c5c42c30ac6cc15fac9bd938618bcaa1a1fae8501d512051d96ef6960cc7b4c884e1215564f926011a40644988a896b1227218e4a686fde5eabdcabd91571f004491695586000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000283194c00000000000000000000000000000000000000000000000000000000648c99e000a007e5c0d20000000000000000000000000000000000000000000001490000f600008f0c20e3520349f477a5f6eb06107066048508498a291b3f239d83af94f836b93910d29704def88542e2a76ae4071138002dc6c03f239d83af94f836b93910d29704def88542e2a763da4db6ef4e7c62168ab03982399f9588fcd19800000000000000000000000000000000000000000000000000d161689dbe747ae3520349f477a5f6eb06107066048508498a291b00206ae4071138002dc6c063da4db6ef4e7c62168ab03982399f9588fcd19820f8aefb5697b77e0bb835a8518be70775cda1b000000000000000000000000000000000000000000046c48145a8d875755fc901c9bdeed33cd01541e1eed10f90519d2c06fe3feb00206ae4071118002dc6c020f8aefb5697b77e0bb835a8518be70775cda1b000000000000000000000000000000000000000000000000000000000061a0636c42c30ac6cc15fac9bd938618bcaa1a1fae8501d80a06c4eca27b12bfca5a55806aaf64e99521918a4bf0fc408021111111254eeb25477b68fb85ed929f73a9605820000000000000000000000b4eb6cb3`// await fetchData(tokenASwapParams)
                tokensData[1] = `0x12aa3caf0000000000000000000000007731f8df999a9441ae10519617c24568dc82f697000000000000000000000000e3520349f477a5f6eb06107066048508498a291b0000000000000000000000004988a896b1227218e4a686fde5eabdcabd91571f0000000000000000000000007731f8df999a9441ae10519617c24568dc82f697000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000c9256aa0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060f0000000000000000000000000000000000000005f10005c300006800004e80206c4eca27e3520349f477a5f6eb06107066048508498a291b46a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78e3520349f477a5f6eb06107066048508498a291b00a0c9e75c480000000000000402020200000000000000000000000000000000000000052d0003c000034500016f00a007e5c0d200000000000000000000000000000000000000000000000000014b00007b0c20e3520349f477a5f6eb06107066048508498a291bbb310ef4fac855f2f49d8fb35a2da8f639b3464e6ae4071118002dc6c0bb310ef4fac855f2f49d8fb35a2da8f639b3464e00000000000000000000000000000000000000000000000000000000028e02cee3520349f477a5f6eb06107066048508498a291b512051d96ef6960cc7b4c884e1215564f926011a4064b12bfca5a55806aaf64e99521918a4bf0fc4080200449169558600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028d79fd00000000000000000000000000000000000000000000000000000000648c99e100a007e5c0d20000000000000000000000000000000000000000000001b20000e200008f0c20e3520349f477a5f6eb06107066048508498a291b28058325c9d1779b74f5b6ae9ecd83e30bc961b16ae4071138002dc6c028058325c9d1779b74f5b6ae9ecd83e30bc961b120f8aefb5697b77e0bb835a8518be70775cda1b00000000000000000000000000000000000000000001d167f77bdd0d5188702e3e3520349f477a5f6eb06107066048508498a291b00206ae4071118002dc6c020f8aefb5697b77e0bb835a8518be70775cda1b0000000000000000000000000000000000000000000000000000000000283548cc42c30ac6cc15fac9bd938618bcaa1a1fae8501d5120458459e48dbac0c8ca83f8d0b7b29fefe60c3970b12bfca5a55806aaf64e99521918a4bf0fc408020044916955860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002823f5200000000000000000000000000000000000000000000000000000000648c99e10c20e3520349f477a5f6eb06107066048508498a291b2c4d78a40bab1a6cbb4b59297cd7b2eba21128ef6ae4071118002dc6c02c4d78a40bab1a6cbb4b59297cd7b2eba21128ef0000000000000000000000000000000000000000000000000000000002753017e3520349f477a5f6eb06107066048508498a291b00a007e5c0d20000000000000000000000000000000000000000000001490000f600008f0c20e3520349f477a5f6eb06107066048508498a291b3f239d83af94f836b93910d29704def88542e2a76ae4071138002dc6c03f239d83af94f836b93910d29704def88542e2a763da4db6ef4e7c62168ab03982399f9588fcd19800000000000000000000000000000000000000000000000000ad40c5f46fd703e3520349f477a5f6eb06107066048508498a291b00206ae4071138002dc6c063da4db6ef4e7c62168ab03982399f9588fcd19803b666f3488a7992b2385b12df7f35156d7b29cd0000000000000000000000000000000000000000003a91c19a58e7988b01c7a7c9bdeed33cd01541e1eed10f90519d2c06fe3feb00206ae4071118002dc6c003b666f3488a7992b2385b12df7f35156d7b29cd00000000000000000000000000000000000000000000000000000000050d6d43c42c30ac6cc15fac9bd938618bcaa1a1fae8501d80a06c4eca274988a896b1227218e4a686fde5eabdcabd91571f1111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000b4eb6cb3`
                tokensData[2] = `0x12aa3caf0000000000000000000000007731f8df999a9441ae10519617c24568dc82f697000000000000000000000000e3520349f477a5f6eb06107066048508498a291b0000000000000000000000005183e1b1091804bc2602586919e6880ac1cf28960000000000000000000000007731f8df999a9441ae10519617c24568dc82f697000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000009033ce06ae5a236b30000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028a00000000000000000000000000000000000000026c00023e00006800004e80206c4eca27e3520349f477a5f6eb06107066048508498a291b46a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf78e3520349f477a5f6eb06107066048508498a291b00a007e5c0d20000000000000000000000000000000000000000000001b20000e200008f0c20e3520349f477a5f6eb06107066048508498a291b3f239d83af94f836b93910d29704def88542e2a76ae4071138002dc6c03f239d83af94f836b93910d29704def88542e2a72f41af687164062f118297ca10751f4b55478ae100000000000000000000000000000000000000000000000001672c5ce89fc0abe3520349f477a5f6eb06107066048508498a291b00206ae4071118002dc6c02f41af687164062f118297ca10751f4b55478ae10000000000000000000000000000000000000000000000000000000009ec6071c9bdeed33cd01541e1eed10f90519d2c06fe3feb5120458459e48dbac0c8ca83f8d0b7b29fefe60c3970b12bfca5a55806aaf64e99521918a4bf0fc40802004491695586000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009033ce06ae5a236b300000000000000000000000000000000000000000000000000000000648c99e180a06c4eca275183e1b1091804bc2602586919e6880ac1cf28961111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000b4eb6cb3`

                const farmAddress = await factory.Farms(pool)

                if (farmAddress === constants.ZERO_ADDRESS) {
                    stakingRewardsBalanceBefore = new BN(0)
                } else {
                    const farm = await Farm.at(farmAddress)
                    stakingRewardsBalanceBefore = (await MasterChef.userInfo(pid, farm.address)).amount
                }
                stakeLPBefore = await assetRouter.userStake(DAIHolder, pool)

                totalDepositsLPBefore = await assetRouter.totalDeposits(pool)
            })
            it('fires events', async () => {
                const receipt = await assetRouter.depositWithSwap(pool, tokensData, 0, DAIHolder, { from: DAIHolder })

                expectEvent(receipt, 'Deposit', { lpPool: pool, sender: DAIHolder, recipient: DAIHolder })
            })
            it('withdraws tokens from balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)
                const tokenDiff = tokenBalanceBefore.sub(tokenBalanceAfter)

                approxeq(tokenDiff, DAIAmount, new BN(0), 'Amount Tokens Sent is not correct')
            })
            it('updates stakes', async () => {
                const stakeLP = await assetRouter.userStake(DAIHolder, pool)
                assert.ok(stakeLP.gt(stakeLPBefore), 'LP stake not increased')
            })
            it('updates totalDeposits', async () => {
                const totalDepositsLP = await assetRouter.totalDeposits(pool)
                assert.ok(totalDepositsLP.gt(totalDepositsLPBefore), 'totalDeposits not increased')
            })
            it('stakes tokens in MasterChef contract', async () => {
                const farmAddress = await factory.Farms(pool)
                const farm = await Farm.at(farmAddress)

                const stakingRewardBalance = new BN((await MasterChef.userInfo(pid, farm.address)).amount)
                assert.ok(stakingRewardBalance.gt(stakingRewardsBalanceBefore), 'MasterChef balance not increased')
            })
        })
    })
})
