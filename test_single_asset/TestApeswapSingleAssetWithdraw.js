const {
    expectEvent, BN
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmApeswap')
const AssetRouter = artifacts.require('UnoAssetRouterApeswap')

const pool = '0x51e6D27FA57373d8d4C256231241053a70Cb1d93' // wbnb busd

const DAIHolder = '0xF977814e90dA44bFA03b6295A0616a897441aceC'// has to be unlocked and hold 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3

approxeq = (bn1, bn2, epsilon, message) => {
    const amountDelta = bn1.sub(bn2).add(epsilon)
    assert.ok(!amountDelta.isNeg(), message)
}

contract('UnoAssetRouterApeswapSingleAssetWithdraw', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin
        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })
        DAIToken = await IUniswapV2Pair.at('0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa40000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000e7ff0004c23c0bc000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000018200006800004e80206c4eca271af3f329e8be154074d8769d1ffa4ee058b1dbc346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf781af3f329e8be154074d8769d1ffa4ee058b1dbc300a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c201af3f329e8be154074d8769d1ffa4ee058b1dbc33ab77e40340ab084c3e23be8e5a6f7afed9d41dc6ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1b96b92314c44b159149f7e0303511fb2fc4774f00000000000000000000000000000000000000000000000d6354e1ee239173ec1af3f329e8be154074d8769d1ffa4ee058b1dbc300206ae4071138001e84801b96b92314c44b159149f7e0303511fb2fc4774f1111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000e7ff0004c23c0bce9e7cea3dedca5984780bafc599bd69add087d56b4eb6cb3`// await fetchData(tokenASwapParams)
                const tokenBData = `0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa40000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000d6354e1ee239173ec000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001150000000000000000000000000000000000000000000000f700006800004e80206c4eca271af3f329e8be154074d8769d1ffa4ee058b1dbc346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf781af3f329e8be154074d8769d1ffa4ee058b1dbc30c201af3f329e8be154074d8769d1ffa4ee058b1dbc33ab77e40340ab084c3e23be8e5a6f7afed9d41dc6ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000d6354e1ee239173ec1af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000b4eb6cb3`// await fetchData(tokenBSwapParams)
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder);
                ({
                    stakeLP: stakeLPBefore,
                    stakeA,
                    stakeB
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000f977814e90da44bfa03b6295a0616a897441acec0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000064adc452e8bde0175000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000018200006800004e80206c4eca27bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c46a3a41bd932244dd08186e4c19f1a7e48cbcdf4000000000000000000000000000000000000000000000000002386f26fc100000020d6bdbf78bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c20bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c1b96b92314c44b159149f7e0303511fb2fc4774f6ae40711b8001e84801b96b92314c44b159149f7e0303511fb2fc4774f3ab77e40340ab084c3e23be8e5a6f7afed9d41dc0000000000000000000000000000000000000000000000064fe1e934d0292116bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00206ae4071138001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000064adc452e8bde0175e9e7cea3dedca5984780bafc599bd69add087d56b4eb6cb3'
                const tokenBData = '0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000f977814e90da44bfa03b6295a0616a897441acec00000000000000000000000000000000000000000000001043561a882930000000000000000000000000000000000000000000000000000806376d235eafa2b3000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001150000000000000000000000000000000000000000000000f700006800004e80206c4eca27e9e7cea3dedca5984780bafc599bd69add087d5646a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000029a2241af62c00000020d6bdbf78e9e7cea3dedca5984780bafc599bd69add087d560c20e9e7cea3dedca5984780bafc599bd69add087d563ab77e40340ab084c3e23be8e5a6f7afed9d41dc6ae4071138001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000806376d235eafa2b3e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000b4eb6cb3'

                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa40000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000000e7ff0004c23c0bc000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000018200006800004e80206c4eca271af3f329e8be154074d8769d1ffa4ee058b1dbc346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf781af3f329e8be154074d8769d1ffa4ee058b1dbc300a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c201af3f329e8be154074d8769d1ffa4ee058b1dbc33ab77e40340ab084c3e23be8e5a6f7afed9d41dc6ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1b96b92314c44b159149f7e0303511fb2fc4774f00000000000000000000000000000000000000000000000d6354e1ee239173ec1af3f329e8be154074d8769d1ffa4ee058b1dbc300206ae4071138001e84801b96b92314c44b159149f7e0303511fb2fc4774f1111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000e7ff0004c23c0bce9e7cea3dedca5984780bafc599bd69add087d56b4eb6cb3`// await fetchData(tokenASwapParams)
                const tokenBData = `0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa40000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000d6354e1ee239173ec000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001150000000000000000000000000000000000000000000000f700006800004e80206c4eca271af3f329e8be154074d8769d1ffa4ee058b1dbc346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf781af3f329e8be154074d8769d1ffa4ee058b1dbc30c201af3f329e8be154074d8769d1ffa4ee058b1dbc33ab77e40340ab084c3e23be8e5a6f7afed9d41dc6ae40711b8001e84803ab77e40340ab084c3e23be8e5a6f7afed9d41dc1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000d6354e1ee239173ec1af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000b4eb6cb3`// await fetchData(tokenBSwapParams)
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder));
                ({
                    stakeLP: stakeLPBefore
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000f977814e90da44bfa03b6295a0616a897441acec0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000006de97e09bd18000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e80000000000000000000000000000000000000000ca0000a400006800004e80206c4eca27bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c46a3a41bd932244dd08186e4c19f1a7e48cbcdf4000000000000000000000000000000000000000000000000002386f26fc100000020d6bdbf78bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c4121bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000e0211111111254eeb25477b68fb85ed929f73a96058200000000000000000dbd2fc137a30000000000000000000000000000000000000000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000170d2ed0b2a5d9f450652be814784f964749ffa4000000000000000000000000f977814e90da44bfa03b6295a0616a897441acec00000000000000000000000000000000000000000000001043561a882930000000000000000000000000000000000000000000000000000008b87998a11c6c370000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015300000000000000000000000000000000013500011f0000e300006800004e80206c4eca27e9e7cea3dedca5984780bafc599bd69add087d5646a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000029a2241af62c00000020d6bdbf78e9e7cea3dedca5984780bafc599bd69add087d560c20e9e7cea3dedca5984780bafc599bd69add087d561b96b92314c44b159149f7e0303511fb2fc4774f6ae4071118001e84801b96b92314c44b159149f7e0303511fb2fc4774f00000000000000000000000000000000000000000000000008b87998a11c6c37e9e7cea3dedca5984780bafc599bd69add087d564101bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000b4eb6cb3'
                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
