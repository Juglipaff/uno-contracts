const {
    expectEvent, BN, constants
} = require('@openzeppelin/test-helpers')
const { deployProxy } = require('@openzeppelin/truffle-upgrades')

const IUniswapV2Pair = artifacts.require('IUniswapV2Pair')
const IERC20 = artifacts.require('IERC20')

const AccessManager = artifacts.require('UnoAccessManager')
const FarmFactory = artifacts.require('UnoFarmFactory')

const Farm = artifacts.require('UnoFarmMeshswap')
const AssetRouter = artifacts.require('UnoAssetRouterMeshswap')

const pool = '0x2915D57D076Ca2233F73B2E724Fea4F3DB967F9B' // weth usdc

const DAIHolder = '0x06959153B974D0D5fDfd87D561db6d8d4FA0bb0B'// has to be unlocked and hold 0xf28164A485B0B2C90639E47b0f377b4a438a16B1

contract('UnoAssetRouterMeshswapWithSwapWithdraw', (accounts) => {
    const admin = accounts[0]

    let accessManager; let assetRouter
    let DAIToken

    before(async () => {
        const implementation = await Farm.new({ from: admin })
        accessManager = await AccessManager.new({ from: admin })// accounts[0] is admin

        assetRouter = await deployProxy(AssetRouter, { kind: 'uups', initializer: false })
        await FarmFactory.new(implementation.address, accessManager.address, assetRouter.address, { from: admin })

        const lpToken = await IUniswapV2Pair.at(pool)

        const tokenAAddress = await lpToken.token0()
        const tokenBAddress = await lpToken.token1()

        tokenA = await IERC20.at(tokenAAddress)
        tokenB = await IERC20.at(tokenBAddress)

        DAIToken = await IUniswapV2Pair.at('0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063')
    })

    describe('Single Asset Withdraw', () => {
        describe('withdraw token', () => {
            let stakeLPBefore
            let tokenBalanceBefore

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded1000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000001f4b6773c7db1fa0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025d00000000000000000000000000000000000000000000023f00006800004e80206c4eca278f3cf7ad23cd3cadbd9735aff958023239c6a06346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf788f3cf7ad23cd3cadbd9735aff958023239c6a06300a0c9e75c48000000000000000008020000000000000000000000000000000000000000000000000001a900008f0c208f3cf7ad23cd3cadbd9735aff958023239c6a0634a35582a710e1f4b2030a3f826da20bfb6703c096ae4071138002dc6c04a35582a710e1f4b2030a3f826da20bfb6703c091111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000644830dbfd104d8f3cf7ad23cd3cadbd9735aff958023239c6a06300a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c208f3cf7ad23cd3cadbd9735aff958023239c6a063f04adbf75cdfc5ed26eea4bbbb991db002036bdd6ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd853ee4b2a13f8a742d64c8f088be7ba2131f670d000000000000000000000000000000000000000000000000000000000bc36d5e8f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae40711b8002dc6c0853ee4b2a13f8a742d64c8f088be7ba2131f670d1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000001906e466080a1ad2791bca1f2de4661ed88a30c99a7a9449aa84174000000b4eb6cb3`
                const tokenBData = `0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded1000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000eb3d9d1000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001150000000000000000000000000000000000000000000000f700006800004e80206c4eca278f3cf7ad23cd3cadbd9735aff958023239c6a06346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf788f3cf7ad23cd3cadbd9735aff958023239c6a0630c208f3cf7ad23cd3cadbd9735aff958023239c6a063f04adbf75cdfc5ed26eea4bbbb991db002036bdd6ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000eb3d9d18f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000b4eb6cb3`
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                tokenBalanceBefore = await DAIToken.balanceOf(DAIHolder);
                ({
                    stakeLP: stakeLPBefore,
                    stakeA,
                    stakeB
                } = await assetRouter.userStake(DAIHolder, pool))
                console.log(stakeA.toString(), stakeB.toString())
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded100000000000000000000000006959153b974d0d5fdfd87d561db6d8d4fa0bb0b00000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000bc0aa6de83630e9090000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037700000000000000000000000000000000000000000000035900006800004e80206c4eca277ceb23fd6bc0add59e62ac25578270cff1b9f61946a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000000008e1bc9bf040000020d6bdbf787ceb23fd6bc0add59e62ac25578270cff1b9f61900a0c9e75c48000000000000000503020000000000000000000000000000000000000000000002c30001a900011a00a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c207ceb23fd6bc0add59e62ac25578270cff1b9f619f6422b997c7f54d1c6a6e103bcb1499eea0a70466ae40711b8002dc6c0f6422b997c7f54d1c6a6e103bcb1499eea0a704659153f27eefe07e5ece4f9304ebba1da6f53ca88000000000000000000000000000000000000000000000000000000000297cb2d7ceb23fd6bc0add59e62ac25578270cff1b9f61900206ae4071138002dc6c059153f27eefe07e5ece4f9304ebba1da6f53ca881111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000259a164938ff1d3b2c2132d05d31c914a87c6611c10748aeb04b58e8f0c207ceb23fd6bc0add59e62ac25578270cff1b9f6194a35582a710e1f4b2030a3f826da20bfb6703c096ae40711b8002dc6c04a35582a710e1f4b2030a3f826da20bfb6703c091111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000388941db27dbc81b47ceb23fd6bc0add59e62ac25578270cff1b9f61900a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c207ceb23fd6bc0add59e62ac25578270cff1b9f619853ee4b2a13f8a742d64c8f088be7ba2131f670d6ae4071138002dc6c0853ee4b2a13f8a742d64c8f088be7ba2131f670df04adbf75cdfc5ed26eea4bbbb991db002036bdd00000000000000000000000000000000000000000000000000000000067b1f117ceb23fd6bc0add59e62ac25578270cff1b9f61900206ae40711b8002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000005de74eba2288293a22791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded100000000000000000000000006959153b974d0d5fdfd87d561db6d8d4fa0bb0b0000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000aaf636a3beb237c97000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001150000000000000000000000000000000000000000000000f700006800004e80206c4eca272791bca1f2de4661ed88a30c99a7a9449aa8417446a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000000000000003d09000020d6bdbf782791bca1f2de4661ed88a30c99a7a9449aa841740c202791bca1f2de4661ed88a30c99a7a9449aa84174f04adbf75cdfc5ed26eea4bbbb991db002036bdd6ae40711b8002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000aaf636a3beb237c972791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000b4eb6cb3'
                // const tokenAData = `0x12aa3caf0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000f5c3455d30458e9a1128f85941f533834f01d8b6000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000022273a3b40943f2be5000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e40000000000000000000000000000000000000000000000000000c600009800a007e5c0d200000000000000000000000000000000000000000000000000007400003a4020f5c3455d30458e9a1128f85941f533834f01d8b6bd6015b4000000000000000000000000a71415675f68f29259ddd63215e5518d2735bf0a4020a71415675f68f29259ddd63215e5518d2735bf0add93f59a0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf80a06c4eca270d500b1d8e8ef31e21c99d1db9a6444d3adf12701111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000cfee7c08`
                // const tokenBData = `0x12aa3caf0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d15038f8a0362b4ce71d6c879d56bf9fc2884cf000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000001d7f99850000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013a00000000000000000000000000000000000000000000000000000000011c4332742aeea3cdc97efc045aab1d432a8fab5a0bcdc1000000000000000000000000000000000000000000000000000000001d7f9985002424b31a0c0000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000cfee7c08`

                // todo: REVERTS on swap not successful
                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })
                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('deposits tokens to balance', async () => {
                const tokenBalanceAfter = await DAIToken.balanceOf(DAIHolder)

                const tokenDiff = tokenBalanceAfter.sub(tokenBalanceBefore)
                assert.ok(tokenDiff.gt(new BN(0)), 'Dai Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
        describe('withdraw ETH', () => {
            let stakeLPBefore
            let ethBalanceBefore
            let ethSpentOnGas

            before(async () => {
                const DAIAmount = new BN('1000000000000000000000') // 1000$
                await DAIToken.approve(assetRouter.address, DAIAmount, { from: DAIHolder })
                const tokenAData = `0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded1000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef50000000000000000000000000000000000000000000000000000001f4b6773c7db1fa0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025d00000000000000000000000000000000000000000000023f00006800004e80206c4eca278f3cf7ad23cd3cadbd9735aff958023239c6a06346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf788f3cf7ad23cd3cadbd9735aff958023239c6a06300a0c9e75c48000000000000000008020000000000000000000000000000000000000000000000000001a900008f0c208f3cf7ad23cd3cadbd9735aff958023239c6a0634a35582a710e1f4b2030a3f826da20bfb6703c096ae4071138002dc6c04a35582a710e1f4b2030a3f826da20bfb6703c091111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000644830dbfd104d8f3cf7ad23cd3cadbd9735aff958023239c6a06300a007e5c0d20000000000000000000000000000000000000000000000000000f600008f0c208f3cf7ad23cd3cadbd9735aff958023239c6a063f04adbf75cdfc5ed26eea4bbbb991db002036bdd6ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd853ee4b2a13f8a742d64c8f088be7ba2131f670d000000000000000000000000000000000000000000000000000000000bc36d5e8f3cf7ad23cd3cadbd9735aff958023239c6a06300206ae40711b8002dc6c0853ee4b2a13f8a742d64c8f088be7ba2131f670d1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000001906e466080a1ad2791bca1f2de4661ed88a30c99a7a9449aa84174000000b4eb6cb3`
                const tokenBData = `0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded1000000000000000000000000${assetRouter.address.substring(2).toLowerCase()}00000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000eb3d9d1000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001150000000000000000000000000000000000000000000000f700006800004e80206c4eca278f3cf7ad23cd3cadbd9735aff958023239c6a06346a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000004563918244f400000020d6bdbf788f3cf7ad23cd3cadbd9735aff958023239c6a0630c208f3cf7ad23cd3cadbd9735aff958023239c6a063f04adbf75cdfc5ed26eea4bbbb991db002036bdd6ae4071138002dc6c0f04adbf75cdfc5ed26eea4bbbb991db002036bdd1111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000eb3d9d18f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000b4eb6cb3`
                await assetRouter.depositWithSwap(pool, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                ethBalanceBefore = new BN(await web3.eth.getBalance(DAIHolder));
                ({
                    stakeLP: stakeLPBefore
                } = await assetRouter.userStake(DAIHolder, pool))
            })
            it('fires events', async () => {
                const tokenAData = '0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded100000000000000000000000006959153b974d0d5fdfd87d561db6d8d4fa0bb0b00000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000013dd267df54c2d9d5c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015300000000000000000000000000000000013500011f0000e300006800004e80206c4eca277ceb23fd6bc0add59e62ac25578270cff1b9f61946a3a41bd932244dd08186e4c19f1a7e48cbcdf40000000000000000000000000000000000000000000000000008e1bc9bf040000020d6bdbf787ceb23fd6bc0add59e62ac25578270cff1b9f6190c207ceb23fd6bc0add59e62ac25578270cff1b9f619adbf1854e5883eb8aa7baf50705338739e558e5b6ae4071118002dc6c0adbf1854e5883eb8aa7baf50705338739e558e5b000000000000000000000000000000000000000000000013dd267df54c2d9d5c7ceb23fd6bc0add59e62ac25578270cff1b9f61941010d500b1d8e8ef31e21c99d1db9a6444d3adf127000042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000b4eb6cb3'
                const tokenBData = '0x12aa3caf000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded10000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000cfd674f8731e801a4a15c1ae31770960e1afded100000000000000000000000006959153b974d0d5fdfd87d561db6d8d4fa0bb0b0000000000000000000000000000000000000000000000000000000017d784000000000000000000000000000000000000000000000000120d31b4539eb7f8970000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015300000000000000000000000000000000013500011f0000e300006800004e80206c4eca272791bca1f2de4661ed88a30c99a7a9449aa8417446a3a41bd932244dd08186e4c19f1a7e48cbcdf400000000000000000000000000000000000000000000000000000000003d09000020d6bdbf782791bca1f2de4661ed88a30c99a7a9449aa841740c202791bca1f2de4661ed88a30c99a7a9449aa841746e7a5fafcec6bb1e78bae2a1f0b612012bf148276ae4071118002dc6c06e7a5fafcec6bb1e78bae2a1f0b612012bf148270000000000000000000000000000000000000000000000120d31b4539eb7f8972791bca1f2de4661ed88a30c99a7a9449aa8417441010d500b1d8e8ef31e21c99d1db9a6444d3adf127000042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000b4eb6cb3'
                const receipt = await assetRouter.withdrawWithSwap(pool, stakeLPBefore, [tokenAData, tokenBData], DAIHolder, { from: DAIHolder })

                const gasUsed = new BN(receipt.receipt.gasUsed)
                const effectiveGasPrice = new BN(receipt.receipt.effectiveGasPrice)

                ethSpentOnGas = gasUsed.mul(effectiveGasPrice)

                expectEvent(receipt, 'Withdraw', {
                    lpPool: pool, sender: DAIHolder, recipient: DAIHolder, amount: stakeLPBefore
                })
            })
            it('withdraws ETH from balance', async () => {
                const ethBalanceAfter = new BN(await web3.eth.getBalance(DAIHolder))

                const ethDiff = ethBalanceAfter.sub(ethBalanceBefore.add(ethSpentOnGas))
                assert.ok(ethDiff.gt(new BN(0)), 'Eth Balance not increased')
            })
            it('updates stakes', async () => {
                const { stakeLP } = await assetRouter.userStake(DAIHolder, pool)
                assert.equal(stakeLP.toString(), '0', 'Stake not withdrawn')
            })
            it('updates totalDeposits', async () => {
                const { totalDepositsLP } = await assetRouter.totalDeposits(pool)
                assert.equal(totalDepositsLP.toString(), '0', 'Stake not withdrawn')
            })
        })
    })
})
