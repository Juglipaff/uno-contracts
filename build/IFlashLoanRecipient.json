{
  "contractName": "IFlashLoanRecipient",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/IFlashLoanRecipient.sol\":\"IFlashLoanRecipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb252ec7657ba7a91be688cbd263090aa5379e504f488a62d06198e0d630322\",\"dweb:/ipfs/QmW56fDiDirhWfWiKrycXE5UY6tTNtFrYx39ipnSs8mkYb\"]},\"project:/contracts/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0x22fe50c77102ad59cc282b1937341a99ba236c6f4fac9fb854c19e1aa8993ec4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://14f9ab9ef4ba3720e6624f3bc5f8c4bafd4a78a8e8645298ecb9cf69ac9233c9\",\"dweb:/ipfs/QmPJBRU9B3a6ikq4obG52CMp4ES5BoJGCkVFcYjRZvn6Zz\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.8.10;\r\n\r\n// Inspired by Aave Protocol's IFlashLoanReceiver.\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IFlashLoanRecipient {\r\n    /**\r\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\r\n     *\r\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\r\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\r\n     * Vault, or else the entire flash loan will revert.\r\n     *\r\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\r\n     */\r\n    function receiveFlashLoan(\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        uint256[] memory feeAmounts,\r\n        bytes memory userData\r\n    ) external;\r\n}",
  "sourcePath": "C:\\Users\\jugli\\Desktop\\contracts\\contracts\\interfaces\\IFlashLoanRecipient.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/IFlashLoanRecipient.sol",
    "exportedSymbols": {
      "IERC20": [
        1092
      ],
      "IFlashLoanRecipient": [
        8700
      ]
    },
    "id": 8701,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8682,
        "literals": [
          "solidity",
          "0.8",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "702:23:32"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 8683,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8701,
        "sourceUnit": 1093,
        "src": "781:56:32",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IFlashLoanRecipient",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 8700,
        "linearizedBaseContracts": [
          8700
        ],
        "name": "IFlashLoanRecipient",
        "nameLocation": "851:19:32",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 8684,
              "nodeType": "StructuredDocumentation",
              "src": "878:504:32",
              "text": " @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n Vault, or else the entire flash loan will revert.\n `userData` is the same value passed in the `IVault.flashLoan` call."
            },
            "functionSelector": "f04f2707",
            "id": 8699,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "receiveFlashLoan",
            "nameLocation": "1397:16:32",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8688,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "1440:6:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1424:22:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20_$1092_$dyn_memory_ptr",
                    "typeString": "contract IERC20[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 8686,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 8685,
                        "name": "IERC20",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1092,
                        "src": "1424:6:32"
                      },
                      "referencedDeclaration": 1092,
                      "src": "1424:6:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1092",
                        "typeString": "contract IERC20"
                      }
                    },
                    "id": 8687,
                    "nodeType": "ArrayTypeName",
                    "src": "1424:8:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20_$1092_$dyn_storage_ptr",
                      "typeString": "contract IERC20[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8691,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "1474:7:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1457:24:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 8689,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1457:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8690,
                    "nodeType": "ArrayTypeName",
                    "src": "1457:9:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8694,
                  "mutability": "mutable",
                  "name": "feeAmounts",
                  "nameLocation": "1509:10:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1492:27:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 8692,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1492:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8693,
                    "nodeType": "ArrayTypeName",
                    "src": "1492:9:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8696,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "1543:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1530:21:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 8695,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1530:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1413:145:32"
            },
            "returnParameters": {
              "id": 8698,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1567:0:32"
            },
            "scope": 8700,
            "src": "1388:180:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 8701,
        "src": "841:730:32",
        "usedErrors": []
      }
    ],
    "src": "702:869:32"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/interfaces/IFlashLoanRecipient.sol",
    "exportedSymbols": {
      "IERC20": [
        1092
      ],
      "IFlashLoanRecipient": [
        8700
      ]
    },
    "id": 8701,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8682,
        "literals": [
          "solidity",
          "0.8",
          ".10"
        ],
        "nodeType": "PragmaDirective",
        "src": "702:23:32"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 8683,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8701,
        "sourceUnit": 1093,
        "src": "781:56:32",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IFlashLoanRecipient",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 8700,
        "linearizedBaseContracts": [
          8700
        ],
        "name": "IFlashLoanRecipient",
        "nameLocation": "851:19:32",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 8684,
              "nodeType": "StructuredDocumentation",
              "src": "878:504:32",
              "text": " @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n Vault, or else the entire flash loan will revert.\n `userData` is the same value passed in the `IVault.flashLoan` call."
            },
            "functionSelector": "f04f2707",
            "id": 8699,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "receiveFlashLoan",
            "nameLocation": "1397:16:32",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8688,
                  "mutability": "mutable",
                  "name": "tokens",
                  "nameLocation": "1440:6:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1424:22:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20_$1092_$dyn_memory_ptr",
                    "typeString": "contract IERC20[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 8686,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 8685,
                        "name": "IERC20",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1092,
                        "src": "1424:6:32"
                      },
                      "referencedDeclaration": 1092,
                      "src": "1424:6:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1092",
                        "typeString": "contract IERC20"
                      }
                    },
                    "id": 8687,
                    "nodeType": "ArrayTypeName",
                    "src": "1424:8:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20_$1092_$dyn_storage_ptr",
                      "typeString": "contract IERC20[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8691,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "1474:7:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1457:24:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 8689,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1457:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8690,
                    "nodeType": "ArrayTypeName",
                    "src": "1457:9:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8694,
                  "mutability": "mutable",
                  "name": "feeAmounts",
                  "nameLocation": "1509:10:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1492:27:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 8692,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1492:7:32",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 8693,
                    "nodeType": "ArrayTypeName",
                    "src": "1492:9:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8696,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "1543:8:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 8699,
                  "src": "1530:21:32",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 8695,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1530:5:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1413:145:32"
            },
            "returnParameters": {
              "id": 8698,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1567:0:32"
            },
            "scope": 8700,
            "src": "1388:180:32",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 8701,
        "src": "841:730:32",
        "usedErrors": []
      }
    ],
    "src": "702:869:32"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-12-16T12:18:27.648Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "receiveFlashLoan(address[],uint256[],uint256[],bytes)": {
        "details": "When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}