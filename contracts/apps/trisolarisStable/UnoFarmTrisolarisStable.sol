// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import './interfaces/IUnoFarmTrisolarisStable.sol';
import "../../interfaces/IUniswapV2Pair.sol";
import "../../interfaces/IUniswapV2Router02.sol";
import "../../interfaces/IUniversalMasterChef.sol";
import "../../interfaces/IComplexRewarder.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

contract UnoFarmTrisolarisStable is Initializable, ReentrancyGuardUpgradeable, IUnoFarmTrisolarisStable {
    using SafeERC20 for IERC20;

    /**
     * @dev Tokens Used:
     * {rewardToken} - Token generated by staking (TRI).
     * {rewarderToken} - Token generated by ComplexRewarder contract.
     * {lpPool} - Token that the strategy maximizes. The same token that users deposit in the {MasterChef}.
     * {tokens} - Tokens that the strategy maximizes.
     */
    address public rewardToken;
    address public rewarderToken;
    address public lpPool;
    address[] public tokens;

    /**
     * @dev Third Party Contracts:
     * {swap} - Address of swap contract.
     * {trisolarisRouter} - The contract that executes swaps.
     * {MasterChef} -The contract that distibutes {rewardToken}.
     */
    ISwap public swap;
    IUniswapV2Router02 private constant trisolarisRouter = IUniswapV2Router02(0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B);
    IUniversalMasterChef private constant MasterChef = IUniversalMasterChef(0x3838956710bcc9D122Dd23863a0549ca8D5675D6);

    /**
     * @dev Contract Variables:
     * {pid} - Pool ID.
     * {tokensLength} - Length of {tokens}

     * {totalDeposits} - Total deposits made by users.
     * {totalDepositAge} - Deposits multiplied by blocks the deposit has been in. Flushed every reward distribution.
     * {totalDepositLastUpdate} - Last {totalDepositAge} update block.

     * {distributionID} - Current distribution ID.
     * {userInfo} - Info on each user.
     * {distributionInfo} - Info on each distribution.

     * {fractionMultiplier} - Used to store decimal values.
     */
    uint256 public pid;
    uint256 public tokensLength;

    uint256 private totalDeposits;
    uint256 private totalDepositAge;
    uint256 private totalDepositLastUpdate;

    uint32 private distributionID;
    mapping(address => UserInfo) private userInfo;
    mapping(uint32 => DistributionInfo) private distributionInfo;

    uint256 private constant fractionMultiplier = uint256(1 ether);

    /**
     * @dev Contract Variables:
     * {assetRouter} - The contract from which calls to this farm are made.
     */
    address public assetRouter;
    modifier onlyAssetRouter() {
        if(msg.sender != assetRouter) revert CALLER_NOT_ASSET_ROUTER();
        _;
    }

    // ============ Methods ============

    function initialize(address _swap, address _assetRouter) external initializer {
        if(_swap == address(0)) revert INVALID_LP_POOL();
        if(_assetRouter == address(0)) revert INVALID_ASSET_ROUTER();

        __ReentrancyGuard_init();
        assetRouter = _assetRouter;

        _getTokens(_swap);

        swap = ISwap(_swap);
        (,,,,,,lpPool) = swap.swapStorage();
        pid = _getPoolId(lpPool);

        rewardToken = MasterChef.TRI();

        address ComplexRewarder = MasterChef.rewarder(pid);
        if (ComplexRewarder != address(0)) {
            (IERC20[] memory rewarderTokenArray, ) = IComplexRewarder(ComplexRewarder).pendingTokens(pid, address(0), 0);
            rewarderToken = address(rewarderTokenArray[0]);
            IERC20(rewarderToken).approve(address(trisolarisRouter), type(uint256).max);
        }

        distributionInfo[0] = DistributionInfo({
            block: block.number,
            rewardPerDepositAge: 0,
            cumulativeRewardAgePerDepositAge: 0
        });
        distributionID = 1;
        totalDepositLastUpdate = block.number;

        IERC20(lpPool).approve(address(MasterChef), type(uint256).max);
        IERC20(lpPool).approve(_swap, type(uint256).max);
        IERC20(rewardToken).approve(address(trisolarisRouter), type(uint256).max);
        for (uint256 i = 0; i < tokens.length; i++) {
            IERC20(tokens[i]).approve(_swap, type(uint256).max);
        }
    }

    /**
     * @dev Function that makes the deposits.
     * Stakes {amount} of LP tokens from this contract's balance in the {MasterChef}.
     */
    function deposit(uint256 amount, address recipient) external onlyAssetRouter {
        if(amount == 0) revert NO_LIQUIDITY_PROVIDED();

        _updateDeposit(recipient);
        userInfo[recipient].stake += amount;
        totalDeposits += amount;
        
        MasterChef.deposit(pid, amount, address(this));
    }

    /**
     * @dev Withdraws funds from {origin} and sends them to the {recipient}.
     */
    function withdraw(
        uint256 amount,
        address origin,
        address recipient
    ) external onlyAssetRouter {
        if(amount == 0) revert INSUFFICIENT_AMOUNT();

        _updateDeposit(origin);
		UserInfo storage user = userInfo[origin];
		// Subtract amount from user.reward first, then subtract remainder from user.stake.
		uint256 reward = user.reward;
		if (amount > reward) {
			uint256 balance = user.stake + reward;
            if(amount > balance) revert INSUFFICIENT_BALANCE();

			user.stake = balance - amount;
			totalDeposits = totalDeposits + reward - amount;
			user.reward = 0;
		} else {
			user.reward = reward - amount;
		}

        MasterChef.withdraw(pid, amount, recipient);
    }

    /**
     * @dev Core function of the strat, in charge of updating, collecting and re-investing rewards.
     * 1. It claims rewards from the {MasterChef}.
     * 2. It swaps {rewardToken} token for {tokenA} & {tokenB}.
     * 3. It deposits new LP tokens back to the {MasterChef}.
     */
    function distribute(
        SwapInfo[] calldata rewardSwapInfos,
        SwapInfo[] calldata rewarderSwapInfos,
        FeeInfo calldata feeInfo
    ) external onlyAssetRouter returns (uint256 reward) {
        if(totalDeposits == 0) revert NO_LIQUIDITY();
        uint32 _distributionID = distributionID;
        if(distributionInfo[_distributionID - 1].block == block.number) revert CALL_ON_THE_SAME_BLOCK();

        uint256 _tokensLength = tokens.length;
        if(rewardSwapInfos.length != _tokensLength) revert INVALID_REWARD_SWAP_INFOS_LENGTH(_tokensLength);
        if(rewarderSwapInfos.length != _tokensLength) revert INVALID_REWARDER_SWAP_INFOS_LENGTH(_tokensLength);

        MasterChef.harvest(pid, address(this));

        { // scope to avoid stack too deep errors
        uint256 rewardTokenFraction;
        address _rewardToken = rewardToken;
        {
            uint256 balance = IERC20(_rewardToken).balanceOf(address(this));
            balance -= _collectFees(IERC20(_rewardToken), balance, feeInfo);
            rewardTokenFraction = balance / _tokensLength;
        }
        uint256 rewarderTokenFraction;
        address _rewarderToken = rewarderToken;
        if (_rewarderToken != address(0)) {
            uint256 balance = IERC20(_rewarderToken).balanceOf(address(this));
            balance -= _collectFees(IERC20(_rewarderToken), balance, feeInfo);
            rewarderTokenFraction = balance / _tokensLength;
        }

        _swapTokens(rewardTokenFraction, _rewardToken, rewardSwapInfos);
        _swapTokens(rewarderTokenFraction, _rewarderToken, rewarderSwapInfos);
        }
        
        uint256[] memory amounts = new uint256[](tokens.length);
        for (uint256 i = 0; i < _tokensLength; i++) {
            amounts[i] = IERC20(tokens[i]).balanceOf(address(this));
        }

        reward = swap.addLiquidity(amounts, 1, block.timestamp);
        uint256 rewardPerDepositAge = reward * fractionMultiplier / (totalDepositAge + totalDeposits * (block.number - totalDepositLastUpdate));
        uint256 cumulativeRewardAgePerDepositAge = distributionInfo[_distributionID - 1].cumulativeRewardAgePerDepositAge + rewardPerDepositAge * (block.number - distributionInfo[_distributionID - 1].block);
        distributionInfo[_distributionID] = DistributionInfo({
            block: block.number,
            rewardPerDepositAge: rewardPerDepositAge,
            cumulativeRewardAgePerDepositAge: cumulativeRewardAgePerDepositAge
        });

        distributionID = _distributionID + 1;
        totalDepositLastUpdate = block.number;
        totalDepositAge = 0;

        MasterChef.deposit(pid, reward, address(this));
    }

    function _swapTokens(uint256 fraction, address _rewardToken, SwapInfo[] calldata swapInfos) internal {
        if (fraction > 0) {
            for (uint256 i = 0; i < swapInfos.length; i++) {
                address _token = tokens[i];
                if (_token != _rewardToken) {
                    address[] calldata route = swapInfos[i].route;
                    if (route[0] != _rewardToken || route[route.length - 1] != _token) revert INVALID_ROUTE(_rewardToken, _token);
                    trisolarisRouter.swapExactTokensForTokens(fraction, swapInfos[i].amountOutMin, route, address(this), block.timestamp);
                }
            }
        }
    }

    /**
	 * @dev Sends fees to feeTo.
	 */
	function _collectFees(IERC20 token, uint256 balance, FeeInfo calldata feeInfo) internal returns(uint256 feeAmount) {
		if (feeInfo.feeTo != address(0)) {
			feeAmount = balance * feeInfo.fee / fractionMultiplier;
			if (feeAmount > 0) {
				token.safeTransfer(feeInfo.feeTo, feeAmount);
			}
		}
	}

    /**
     * @dev Returns total funds staked by the {_address}.
     */
    function userBalance(address _address) external view returns (uint256) {
        return userInfo[_address].stake + _userReward(_address);
    }

    /**
     * @dev Returns total funds locked in the farm.
     */
    function getTotalDeposits() external view returns (uint256 _totalDeposits) {
        if (totalDeposits > 0) {
            _totalDeposits = MasterChef.userInfo(pid, address(this)).amount;
        }
    }

    function _updateDeposit(address _address) internal {
        UserInfo storage user = userInfo[_address];
        // Accumulate deposit age within the current distribution period.
        if (user.lastDistribution == distributionID) {
            // Add deposit age from previous deposit age update to now.
            user.depositAge += user.stake * (block.number - user.lastUpdate);
        } else {
            // A reward has been distributed, update user.reward.
            user.reward = _userReward(_address);
            // Count fresh deposit age from previous reward distribution to now.
            user.depositAge = user.stake * (block.number - distributionInfo[distributionID - 1].block);
        }

        user.lastDistribution = distributionID;
        user.lastUpdate = block.number;

        // Same with total deposit age.
        totalDepositAge += (block.number - totalDepositLastUpdate) * totalDeposits;
        totalDepositLastUpdate = block.number;
    }

    function _userReward(address _address) internal view returns (uint256) {
        UserInfo memory user = userInfo[_address];
        if (user.lastDistribution == distributionID) {
            // Return user.reward if the distribution after the last user deposit did not happen yet.
            return user.reward;
        }
        DistributionInfo memory lastUserDistributionInfo = distributionInfo[user.lastDistribution];
        uint256 userDepositAge = user.depositAge + user.stake * (lastUserDistributionInfo.block - user.lastUpdate);
        // Calculate reward between the last user deposit and the distribution after that.
        uint256 rewardBeforeDistibution = userDepositAge * lastUserDistributionInfo.rewardPerDepositAge / fractionMultiplier;
        // Calculate reward from the distributions that have happened after the last user deposit.
        uint256 rewardAfterDistribution = user.stake * (distributionInfo[distributionID - 1].cumulativeRewardAgePerDepositAge - lastUserDistributionInfo.cumulativeRewardAgePerDepositAge) / fractionMultiplier;
        return user.reward + rewardBeforeDistibution + rewardAfterDistribution;
    }

    /**
     * @dev Utility function used to fill {tokens} array.
     */
    function _getTokens(address _swap) internal {
        for (uint8 i = 0; i < type(uint8).max; i++) {
            (bool success, bytes memory data) = _swap.call(abi.encodeWithSignature("getToken(uint8)", i));
            if (success) {
                tokens.push(abi.decode(data, (address)));
                continue;
            }
            break;
        }
        tokensLength = tokens.length;
    }

    /**
     * @dev Get pid from MasterChef by iterating over all pools and comparing pids.
     */
    function _getPoolId(address _lpPool) internal view returns (uint256 _pid) {
        bool poolExists = false;
        for (uint256 i = 0; i < MasterChef.poolLength(); i++) {
            if (MasterChef.lpToken(i) == _lpPool) {
                _pid = i;
                poolExists = true;
                break;
            }
        }
        if(!poolExists) revert PID_NOT_EXISTS();
        return _pid;
    }
}
