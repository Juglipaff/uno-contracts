// SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

import "../interfaces/IUniswapV2Pair.sol";
import "../interfaces/IUniswapV2Router.sol";
import "../interfaces/IStakingDualRewards.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "../interfaces/IUniswapV2Factory.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract QuickswapDualFarmUpgradeable is UUPSUpgradeable, Initializable, OwnableUpgradeable, ReentrancyGuard {
     using SafeMath for uint256;

      /**
     * @dev Tokens Used:
     * {WETH} - WETH token address
     * {rewardToken} - Token generated by staking our funds.
     * {lpPair} - Token that the strategy maximizes. The same token that users deposit in the {lpStakingPool}.
     * {lpToken0, lpToken1} - Tokens that the strategy maximizes.
     */
    address private constant WETH = address(0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619);
    address private constant QUICK = address(0x831753DD7087CaC61aB5644b308642cc1c33Dc13);
    address public rewardTokenA;
    address public rewardTokenB;
    address public lpPair;
    address public tokenA;
    address public tokenB;
    
    
    /**
     * @dev Third Party Contracts:
     * {quickswapRouter} - The contract that executes swaps
     * {QuickswapV2Factory} - Pairs factory contract
     * {lpStakingPool} - The contract that produces {rewardToken}
     */
    IUniswapV2Router01 private constant quickswapRouter = IUniswapV2Router01(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);
    IUniswapV2Factory private constant QuickswapV2Factory = IUniswapV2Factory(0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32);
    IStakingDualRewards private lpStakingPool;
    
    
     /**
     * @dev Routes:
     * {rewardTokenToLp0Route, rewardTokenToLp1Route} - The routes to trade tokens with
     */
    address[] private rewardTokenAToTokenARoute;
    address[] private rewardTokenAToTokenBRoute;
    
    address[] private rewardTokenBToTokenARoute;
    address[] private rewardTokenBToTokenBRoute;
    
    
    /**
     * @dev Contract Variables:
     * The implementation of “Scalable Reward Distribution on the Ethereum Blockchain” paper by B. Batog, L. Boca and N. Johnson
     * {totalDeposits} - The sum of all active stake deposits | (T)
     * {sumOfRewards} - The sum of (rewards)/(totalDeposits) | (S)
     * {stakes} - All stakes made by users | (stake)
     * {sumOfRewardsForUser} - A sumOfRewards for users at pool join time | (S0)
     */
    uint256 private totalDeposits;
    uint256 private sumOfRewards;
    mapping(address => uint256) private stakes;
    mapping(address => uint256) private sumOfRewardsForUser;

    // ============ Methods ============
    
    function initialize(address _lpStakingPool, address owner) public initializer {
        __Ownable_init();
        transferOwnership(owner);

        lpStakingPool = IStakingDualRewards(_lpStakingPool);
        lpPair = address(lpStakingPool.stakingToken());
        
        rewardTokenA = lpStakingPool.rewardsTokenA();
        rewardTokenB = lpStakingPool.rewardsTokenB();
        
        tokenA = IUniswapV2Pair(lpPair).token0();
        tokenB = IUniswapV2Pair(lpPair).token1();

        if(tokenA == WETH){
            rewardTokenAToTokenARoute = [rewardTokenA, WETH];
            rewardTokenBToTokenARoute = [rewardTokenB, WETH];
        }
        else {
            if(tokenA != rewardTokenA){
                if(QuickswapV2Factory.getPair(WETH, tokenA) == address(0)){
                    rewardTokenAToTokenARoute = [rewardTokenA, WETH, QUICK, tokenA]; 
                } else {
                    rewardTokenAToTokenARoute = [rewardTokenA, WETH, tokenA];
                }
            }
            if(tokenA != rewardTokenB){
                if(QuickswapV2Factory.getPair(WETH, tokenA) == address(0)){
                    rewardTokenBToTokenARoute = [rewardTokenB, WETH, QUICK, tokenA]; 
                } else {
                    rewardTokenBToTokenARoute = [rewardTokenB, WETH, tokenA];
                }
            }
        }
                
        if(tokenB == WETH){
            rewardTokenAToTokenBRoute = [rewardTokenA, WETH];
            rewardTokenBToTokenBRoute = [rewardTokenB, WETH];
        }
        else {
            if(tokenB != rewardTokenA){
                if(QuickswapV2Factory.getPair(WETH, tokenB) == address(0)){
                    rewardTokenAToTokenBRoute = [rewardTokenA, WETH, QUICK, tokenB];
                } else {
                    rewardTokenAToTokenBRoute = [rewardTokenA, WETH, tokenB];
                }
            }
            if(tokenB != rewardTokenB){
                if(QuickswapV2Factory.getPair(WETH, tokenB) == address(0)){
                    rewardTokenBToTokenBRoute = [rewardTokenB, WETH, QUICK, tokenB];
                } else {
                    rewardTokenBToTokenBRoute = [rewardTokenB, WETH, tokenB];
                }
            }
        }
        
        uint256 MAX_UINT = uint256(2**256 - 1);
        IERC20(lpPair).approve(_lpStakingPool, MAX_UINT);
        IERC20(lpPair).approve(address(quickswapRouter), MAX_UINT);
        IERC20(rewardTokenA).approve(address(quickswapRouter), MAX_UINT);
        IERC20(rewardTokenB).approve(address(quickswapRouter), MAX_UINT);
        IERC20(tokenA).approve(address(quickswapRouter), MAX_UINT);
        IERC20(tokenB).approve(address(quickswapRouter), MAX_UINT);
    }

    /**
     * @dev Function that makes the deposits
     * If it's not the first deposit, withdraws {lpStakingPool} and deposits new tokens with the old ones.
     */
    function deposit(uint256 amountA, uint256 amountB, uint256 amountLP, address origin) external onlyOwner nonReentrant returns(uint256){
         uint256 withdrawAmount = 0;
        if (stakes[origin] != 0) {
             withdrawAmount = withdrawToContract(origin);
        }

        uint256 returnedA = amountA;
        uint256 returnedB = amountB;
        uint256 addedLiquidity = 0;
        
        if(amountA > 0 && amountB > 0){
            (returnedA, returnedB, addedLiquidity) = quickswapRouter.addLiquidity(tokenA, tokenB, amountA, amountB, 0, 0, address(this), block.timestamp.add(600));
        }

        uint256 depositAmount = addedLiquidity.add(withdrawAmount).add(amountLP);
        require(depositAmount > 0, 'The amount provided is 0');

        stakes[origin] = depositAmount;
        sumOfRewardsForUser[origin] = sumOfRewards;
        totalDeposits = totalDeposits.add(depositAmount);

        lpStakingPool.stake(depositAmount);

        IERC20(tokenA).transfer(origin, returnedA);
        IERC20(tokenB).transfer(origin, returnedB); 
        
        return depositAmount;
    }

     /**
     * @dev Withdraws funds and sends them to the {{origin}}.
     */
    function withdraw(address origin, bool withdrawLP) external onlyOwner nonReentrant returns(uint256){
        require(stakes[origin] > 0, "The amount staked should be more than 0");
        uint256 withdrawAmount = withdrawToContract(origin);

        if(withdrawLP){
            IERC20(lpPair).transfer(origin, withdrawAmount);
            return withdrawAmount;
        }
        quickswapRouter.removeLiquidity(tokenA, tokenB, withdrawAmount, 0, 0, origin, block.timestamp.add(600));
        return withdrawAmount;
    }

    /**
     * @dev Withdraws funds to this contract.
     * It withdraws {lpPair} from the {lpStakingPool} to this contract.
     */
    function withdrawToContract(address origin) internal returns(uint256){
        uint256 withdrawAmount = userBalance(origin);
        totalDeposits = totalDeposits.sub(stakes[origin]);

        lpStakingPool.withdraw(withdrawAmount);
        stakes[origin] = 0;
        return withdrawAmount;
    }

    /**
     * @dev Core function of the strat, in charge of updating, collecting and re-investing rewards.
     * 1. It claims rewards from the {lpStakingPool}.
     * 2. It swaps the {rewardToken} token for {lpToken0} & {lpToken1}
     * 3. It deposits the new LP tokens back to the {lpStakingPool}.
     */
    function distribute() external onlyOwner nonReentrant{
        require(totalDeposits > 0, 'There should be some tokens in the pool');
                
        lpStakingPool.getReward();
        uint256 rewardTokenAHalf = IERC20(rewardTokenA).balanceOf(address(this)).div(2);
        uint256 rewardTokenBHalf = IERC20(rewardTokenB).balanceOf(address(this)).div(2);
                
        if (tokenA != rewardTokenA) {
            quickswapRouter.swapExactTokensForTokens(rewardTokenAHalf, 0, rewardTokenAToTokenARoute, address(this), block.timestamp.add(600));
        }
        
        if (tokenB != rewardTokenA) {
            quickswapRouter.swapExactTokensForTokens(rewardTokenAHalf, 0, rewardTokenAToTokenBRoute, address(this), block.timestamp.add(600));
        }
        
        if (tokenA != rewardTokenB) {
            quickswapRouter.swapExactTokensForTokens(rewardTokenBHalf, 0, rewardTokenBToTokenARoute, address(this), block.timestamp.add(600));
        }
        
        if (tokenB != rewardTokenB) {
            quickswapRouter.swapExactTokensForTokens(rewardTokenBHalf, 0, rewardTokenBToTokenBRoute, address(this), block.timestamp.add(600));
        }
        
        uint256 tokenABalance = IERC20(tokenA).balanceOf(address(this));
        uint256 tokenBBalance = IERC20(tokenB).balanceOf(address(this));
                
        quickswapRouter.addLiquidity(tokenA, tokenB, tokenABalance, tokenBBalance, 1, 1, address(this), block.timestamp.add(600));
                
        uint256 reward = IERC20(lpPair).balanceOf(address(this));
        if (reward > 0) {
            sumOfRewards = sumOfRewards.add(uint256(1 ether).mul(reward).div(totalDeposits));
            lpStakingPool.stake(reward);
        }
    }

    /**
     * @dev Returns total funds in the {_lpStakingPool} for an {_address}
     */
    function userBalance(address _address) public view returns (uint256) {
        uint256 reward = stakes[_address].mul(sumOfRewards.sub(sumOfRewardsForUser[_address])).div(uint256(1 ether));
        return stakes[_address].add(reward);
    }

    /**
     * @dev Returns total amount locked in the pool.
     */
    function getTotalDeposits() external view returns (uint256) {
        return totalDeposits.add(totalDeposits.mul(sumOfRewards).div(uint256(1 ether)));
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {

    }
}